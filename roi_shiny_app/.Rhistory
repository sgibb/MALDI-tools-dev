for (i in 1:dy)
{
img1[x1, y1+min(y1,y2)+i]
}#End for
} #end if
else
{
if (dy==0)
{
for (i in 1:dx)
{
img1[min(x1,x2)+i, y1,]=0
}#end for
} #end if
else
{
if (dx>=dy)
if (y>0&x>0)
{
octant=0
x0<-x
y0<-y}
else
{
if (y>0&x<0)
{
octant=3
x0<--x
y0<-y
}
else
{
if (y<0&x<0){
octant=4
x0<--x
y0<--y
}
else
{
octant=7
x0<-x
y0<--y
}
}
}
else
{
if (y>0&x>0) {
octant=1
x0<-x
y0<-y
}
else
{
if (y>0&x<0) {
octant=2
x0<--x
y0<-y}
else
{
if (y<0&x<0){
octant=5
x0<--x
y0<--y}
else
{
octant=6
x0<-x
y0<--y
}
}
}
}
D <- 2*dy - dx
ya=0
if (D > 0){
ya <-ya+1
D <- D - (2*dx)
}
for (xa in 1:x0)
{
img1[switchFromOctantZeroTo(octant, xa, ya)[1]+x1, switchFromOctantZeroTo(octant, xa, ya)[2]+y1, ]=0
D <- D + (2*dy)
if (D > 0){
ya <-ya+1
D <-D - (2*dx)}
}
} #end else
}#end else
return(img1)
} #end func
img1<-drawLineImg(img, 10, 20, 40, 50)
iimg
img1
is.integer(20)
is.Integer(20)
is.integer(20)
is.integer(10)
is.integer(+10)
is.integer(-10)
is.integer(-1.0)
is.integer(1.0)
is.integer(0)
is.integer(1)
is.integer(1L)
x=1
is.integer(xL)
is.integer(xL)
typeof(1)
typeof(1L)
floor(x)
is.integer(floor(1))
is.integer (round(1))
as.integer(1)
as.integer(1.0)
drawLineImg<-function (img, x1,y1,x2,y2)
{
if (is.Image(img)== FALSE )
{
return()
}
#if (is.integer(x1)==FALSE | is.integer(x2)==FALSE | is.integer(y1)==FALSE | is.integer(y2)==FALSE)
#    { return("No valid index") }
#if ((x1>dim(img)[1]) | (x2>dim(img)[1]))
#{
# return()
#}
if ((y1>dim(img)[2]) | (y2>dim(img)[2]))
{
return("Out of index")
}
x=x2-x1
y=y2-y1
dx<-abs(x)
dy<-abs(y)
img1<-img
img1[x1,y1,]=0
if (dx==0)
{
for (i in 1:dy)
{
img1[x1, y1+min(y1,y2)+i]
} #end if
}#End for
else
{
if (dy==0)
{
for (i in 1:dx)
{
img1[min(x1,x2)+i, y1,]=0
}#end for
} #end if
else
{
if (dx>=dy)
if (y>0&x>0)
{
x0<-x
octant=0
y0<-y}
else
{
if (y>0&x<0)
{
octant=3
x0<--x
y0<-y
}
else
{
if (y<0&x<0){
octant=4
x0<--x
y0<--y
}
else
{
octant=7
x0<-x
y0<--y
}
}
}
else
{
if (y>0&x>0) {
octant=1
x0<-x
y0<-y
}
else
{
if (y>0&x<0) {
octant=2
x0<--x
y0<-y}
else
{
if (y<0&x<0){
octant=5
x0<--x
y0<--y}
else
{
octant=6
x0<-x
y0<--y
}
}
}
}
D <- 2*dy - dx
ya=0
if (D > 0){
ya <-ya+1
D <- D - (2*dx)
}
for (xa in 1:x0)
{
img1[switchFromOctantZeroTo(octant, xa, ya)[1]+x1, switchFromOctantZeroTo(octant, xa, ya)[2]+y1, ]=0
D <- D + (2*dy)
if (D > 0){
ya <-ya+1
D <-D - (2*dx)}
}
} #end else
}#end else
return(img1)
} #end func
img1<-drawLineImg(img,10,20,30,40)
img1
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg")
img1<-drawLineImg(img,30,40,100,200)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg")
img1<-drawLineImg(img,100,200,100,300)
drawLineImg<-function (img, x1,y1,x2,y2)
{
if (is.Image(img)== FALSE )
{
return()
}
#if (is.integer(x1)==FALSE | is.integer(x2)==FALSE | is.integer(y1)==FALSE | is.integer(y2)==FALSE)
#    { return("No valid index") }
#if ((x1>dim(img)[1]) | (x2>dim(img)[1]))
#{
# return()
#}
if ((y1>dim(img)[2]) | (y2>dim(img)[2]))
{
return("Out of index")
}
x=x2-x1
y=y2-y1
dx<-abs(x)
dy<-abs(y)
img1<-img
img1[x1,y1,]=0
if (dx==0)
{
for (i in 1:dy)
{
img1[x1, y1+min(y1,y2)+i,]
}#End for
} #end if
else
{
if (dy==0)
{
for (i in 1:dx)
{
img1[min(x1,x2)+i, y1,]=0
}#end for
} #end if
else
{
if (dx>=dy)
if (y>0&x>0)
{
octant=0
x0<-x
y0<-y}
else
{
if (y>0&x<0)
{
octant=3
x0<--x
y0<-y
}
else
{
if (y<0&x<0){
octant=4
x0<--x
y0<--y
}
else
{
octant=7
x0<-x
y0<--y
}
}
}
else
{
if (y>0&x>0) {
octant=1
x0<-x
y0<-y
}
else
{
if (y>0&x<0) {
octant=2
x0<--x
y0<-y}
else
{
if (y<0&x<0){
octant=5
x0<--x
y0<--y}
else
{
octant=6
x0<-x
y0<--y
}
}
}
}
D <- 2*dy - dx
ya=0
if (D > 0){
ya <-ya+1
D <- D - (2*dx)
}
for (xa in 1:x0)
{
img1[switchFromOctantZeroTo(octant, xa, ya)[1]+x1, switchFromOctantZeroTo(octant, xa, ya)[2]+y1, ]=0
D <- D + (2*dy)
if (D > 0){
ya <-ya+1
D <-D - (2*dx)}
}
} #end else
}#end else
return(img1)
} #end func
img1<-drawLineImg(img, 100, 200, 100, 300)
img(dim)
dim(img)
img1<-drawLineImg(img, 100, 200, 10, 30)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img2<-drawLineImg(img1, 10, 30, 100, 30)
writeImage(img2, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 100, 200, 10, 30)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 100, 200, 10, 30)
img2<-drawLineImg(img1, 100, 200, 200, 30)
writeImage(img2, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 200, 30, 10, 30)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 200, 30, 100, 30)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 200, 30, 10, 30)
img2
img1
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 200, 30, 300, 20)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img1<-drawLineImg(img2, 20, 30, 300, 20)
writeImage(img1, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img3<-drawLineImg(img, 20, 30, 300, 20)
writeImage(img3, "~\\maldi_App\\ichHabeDichLieb.jpg" )
img3
img3<-drawLineImg(img, 10, 30, 30, 20)
writeImage(img3, "~\\maldi_App\\ichHabeDichLieb.jpg" )
switchFromOctantZeroTo<- function(octant, x, y)
{
coord<-NULL
coord<-switch(octant+1, c(x,y), c(y,x), c(-y, x), c(-x, y), c(-x, -y), c(-y, -x), c(x, -y))
return(coord)
}
drawLineImg<-function (img, x1,y1,x2,y2)
{
if (is.Image(img)== FALSE )
{
return()
}
#if (is.integer(x1)==FALSE | is.integer(x2)==FALSE | is.integer(y1)==FALSE | is.integer(y2)==FALSE)
#    { return("No valid index") }
#if ((x1>dim(img)[1]) | (x2>dim(img)[1]))
#{
# return()
#}
if ((y1>dim(img)[2]) | (y2>dim(img)[2]))
{
return("Out of index")
}
x=x2-x1
y=y2-y1
dx<-abs(x)
dy<-abs(y)
img1<-img
img1[x1,y1,]=0
if (dx==0)
{
for (i in 1:dy)
{
img1[x1, y1+min(y1,y2)+i,]
}#End for
} #end if
else
{
if (dy==0)
{
for (i in 1:dx)
{
img1[min(x1,x2)+i, y1,]=0
}#end for
} #end if
else
{
if (dx>=dy)
if (y>0&x>0)
{
octant=0
x0<-x
y0<-y}
else
{
if (y>0&x<0)
{
octant=3
x0<--x
y0<-y
}
else
{
if (y<0&x<0){
octant=4
x0<--x
y0<--y
}
else
{
octant=7
x0<-x
y0<--y
}
}
}
else
{
if (y>0&x>0) {
octant=1
x0<-x
y0<-y
}
else
{
if (y>0&x<0) {
octant=2
x0<--x
y0<-y}
else
{
if (y<0&x<0){
octant=5
x0<--x
y0<--y}
else
{
octant=6
x0<-x
y0<--y
}
}
}
}
D <- 2*dy - dx
ya=0
if (D > 0){
ya <-ya+1
D <- D - (2*dx)
}
for (xa in 1:x0)
{
img1[switchFromOctantZeroTo(octant, xa, ya)[1]+x1, switchFromOctantZeroTo(octant, xa, ya)[2]+y1, ]=0
D <- D + (2*dy)
if (D > 0){
ya <-ya+1
D <-D - (2*dx)}
}
} #end else
}#end else
return(img1)
} #end func
img<-readImage("~\\maldi_App\\test.jpg")
img1<-drawLineImg(img, 10, 100, 200, 11)
writeImage(img1, "~ \\maldi_App\\ichHabeDichLieb.jpg")
writeImage(img, "~ \\maldi_App\\ichHabeDichLieb.jpg")
library(shiny)
shiny::runApp('maldi_App')
shiny::runApp('maldi_App')
{
shiny::runApp()
shiny::runApp()
shiny::runApp()
